builds:
  # You can have multiple builds defined as a yaml list
  - #
    # ID of the build.
    #
    # Default: Project directory name.
    id: "ghq-fzf"

    # Use bun.
    builder: bun

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    #
    # Default: Project directory name.
    binary: program

    # List of targets to be built, in Bun's format.
    #
    # See: https://bun.sh/docs/bundler/executables
    # The `bun-` prefix is added automatically.
    # Default: [ "linux-x64-modern", "linux-arm64", "darwin-x64", "darwin-arm64", "windows-x64-modern" ]
    targets:
      - linux-x64-modern
      - darwin-arm64

    # Path to project's (sub)directory containing the code.
    # This is the working directory for the `bun build` command(s).
    #
    # Default: '.'.
    # dir: my-app

    # Main entry point.
    #
    # Default: extracted from package.json or `.`.
    main: "cli.ts"

    # Set a specific bun binary to use when building.
    # It is safe to ignore this option in most cases.
    #
    # Default: "bun".
    # Templates: allowed.
    tool: "bun-nightly"

    # Sets the command to run to build.
    #
    # Default: build.
    # command: not-build

    # Custom flags.
    #
    # Templates: allowed.
    # Default: ["--compile"].
    flags:
      - --minify
      - --compile
      - --sourcemap

    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    #
    # Default: os.Environ() ++ env config section.
    # Templates: allowed.
    # env:
    #   - FOO=bar

    # Hooks can be used to customize the final binary,
    # for example, to run generators.
    #
    # Templates: allowed.
    # hooks:
    #   pre: ./foo.sh
    #   post: ./script.sh {{ .Path }}

    # If true, skip the build.
    # Useful for library projects.
    skip: false

brews:
  -
    # Name of the recipe
    #
    # Default: the project name.
    # Templates: allowed.
    name: ghq-fzf

    # Alternative names for the current recipe.
    #
    # Useful if you want to publish a versioned formula as well, so users can
    # more easily downgrade.
    #
    # This feature is only available in GoReleaser Pro.
    # Templates: allowed.
    alternative_names:
      - myproject@{{ .Version }}
      - myproject@{{ .Major }}

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    #   - foo
    #   - bar

    # Sets the app file within a DMG.
    #
    # This feature is only available in GoReleaser Pro.
    # app: MyApp.app

    # GOARM to specify which 32-bit arm version to use if there are multiple
    # versions from the build section. Brew formulas support only one 32-bit
    # version.
    #
    # Default: 6.
    goarm: 6

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1.
    goamd64: v1

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed.
    # url_template: "https://github.mycompany.com/foo/bar/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Headers to include in the `url` stanza.
    # This can be a more modern alternative to `download_strategy` in some
    # cases.
    # url_headers:
    #   - "Accept: application/octet-stream"
    #   - 'Authorization: bearer #{ENV["HOMEBREW_GITHUB_API_TOKEN"]}'

    # Allows you to set a custom download strategy. Note that you'll need
    # to implement the strategy and add it to your tap repository.
    # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
    download_strategy: CurlDownloadStrategy

    # Allows you to add a custom require_relative at the top of the formula
    # template.
    # custom_require: custom_download_strategy

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Directory inside the repository to put the formula.
    directory: Formula

    # Caveats for the user of your binary.
    caveats: "How to use this binary"

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    # homepage: "https://example.com/"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    # description: "Software to create fast and easy drum rolls."

    # SPDX identifier of your app's license.
    #
    # Default: inferred from global metadata.
    license: "MIT"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    # skip_upload: true

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # custom_block: |
    #   head "https://github.com/some/package.git"
    #   ...

    # Packages your package depends on.
    # dependencies:
    #   - name: git
    #     # Allow to specify the OS in which the dependency is required.
    #     # Valid options are `mac` and `linux`.
    #     os: mac
    #   - name: zsh
    #     type: optional
    #   - name: fish
    #     version: v1.2.3
    #   # if providing both version and type, only the type will be taken into
    #   # account.
    #   - name: elvish
    #     type: optional
    #     version: v1.2.3


    # Packages that conflict with your package.
    # conflicts:
    #   - svn
    #   - bash

    # # Specify for packages that run as a service.
    # plist: |
    #   <?xml version="1.0" encoding="UTF-8"?>
    #   # ...

    # # Service block.
    # service: |
    #   run: foo/bar
    #   # ...

    # # So you can `brew test` your formula.
    # #
    # # Template: allowed
    # test: |
    #   system "#{bin}/foo --version"
    #   # ...

    # Custom install script for brew.
    #
    # Template: allowed
    # Default: 'bin.install "BinaryName"'.
    install: |
      bin.install "darwin-x64" => "_ghq-fzf"

    # Additional install instructions so you don't need to override `install`.
    #
    # Template: allowed
    # extra_install: |
    #   bash_completion.install "completions/foo.bash" => "foo"
    #   man1.install "man/foo.1.gz"
    #   # ...

    # Custom post_install script for brew.
    # Could be used to do any additional work after the "install" script
    # post_install: |
    #     etc.install "app-config.conf"
      # ...

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: yumafuu

      # Repository name.
      #
      # Templates: allowed.
      name: homebrew-tap

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed.
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed.
      token: "{{ .Env.TAP_GITHUB_TOKEN }}"

      # Optionally specify if this is a token from another SCM, allowing to
      # cross-publish.
      #
      # Only taken into account if `token` is set.
      #
      # Valid options:
      # - 'github'
      # - 'gitlab'
      # - 'gitea'
      #
      # This feature is only available in GoReleaser Pro.
      # token_type: "github"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # This might require a personal access token.
      pull_request:
        # Whether to enable it or not.
        enabled: false

        # Whether to open the PR as a draft or not.
        draft: true

        # If the pull request template has checkboxes, enabling this will
        # check all of them.
        #
        # This feature is only available in GoReleaser Pro, and when the pull
        # request is being opened on GitHub.
        check_boxes: true

        # Base can also be another repository, in which case the owner and name
        # above will be used as HEAD, allowing cross-repository pull requests.
        base:
          owner: goreleaser
          name: my-repo
          branch: main

      # Clone, create the file, commit and push, to a regular Git repository.
      #
      # Notice that this will only have any effect if the given URL is not
      # empty.
      # git:
      #   # The Git URL to push.
      #   #
      #   # Templates: allowed.
      #   url: 'ssh://git@myserver.com:repo.git'

      #   # The SSH private key that should be used to commit to the Git
      #   # repository.
      #   # This can either be a path or the key contents.
      #   #
      #   # IMPORTANT: the key must not be password-protected.
      #   #
      #   # WARNING: do not expose your private key in the configuration file!
      #   #
      #   # Templates: allowed.
      #   private_key: '{{ .Env.PRIVATE_KEY_PATH }}'

      #   # The value to be passed to `GIT_SSH_COMMAND`.
      #   # This is mainly used to specify the SSH private key used to pull/push
      #   # to the Git URL.
      #   #
      #   # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'.
      #   # Templates: allowed.
      #   ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'
